#include "Header.h"
#include<iostream> 
#include "triangulate.h"
#include <vector>
#include <assert.h>
#include <list>

using namespace std;

const int MAX_POINTS = 20;

int Cliping::x_intersect(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4) {
	int num = (x1*y2 - y1 * x2) * (x3 - x4) -
		(x1 - x2) * (x3*y4 - y3 * x4);
	int den = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);
	return num / den;
}

int Cliping::y_intersect(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4) {

	int num = (x1*y2 - y1 * x2) * (y3 - y4) -
		(y1 - y2) * (x3*y4 - y3 * x4);
	int den = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);
	return num / den;
}

void Cliping::clip(Vector2dVector &poly_points, int & poly_size, int x1, int y1, int x2, int y2) {

	// (ix,iy),(kx,ky) are the co-ordinate values of 
		// the points 
	Vector2dVector new_points,temp;
	int new_poly_size=0;

	for (int i = 0; i < poly_size; i++)
	{
		// i and k form a line in polygon 

		int k = (i + 1) % poly_size;
		int ix = poly_points[i].GetX(), iy = poly_points[i].GetY();
		int kx = poly_points[k].GetX(), ky = poly_points[k].GetY();

		// Calculating position of first point 
		// w.r.t. clipper line 
		int i_pos = (x2 - x1) * (iy - y1) - (y2 - y1) * (ix - x1);

		// Calculating position of second point 
		// w.r.t. clipper line 
		int k_pos = (x2 - x1) * (ky - y1) - (y2 - y1) * (kx - x1);

		// Case 1 : When both points are inside 
		if (i_pos < 0 && k_pos < 0)
		{
			//Only second point is added 
			new_points.push_back(Vector2d(kx, ky));
			new_poly_size++;
		}

		// Case 2: When only first point is outside 
		else if (i_pos >= 0 && k_pos < 0)
		{
			// Point of intersection with edge 
			// and the second point is added 
			int x = x_intersect(x1, y1, x2, y2, ix, iy, kx, ky);
			int y = y_intersect(x1, y1, x2, y2, ix, iy, kx, ky);
			new_points.push_back(Vector2d(x, y));
			new_poly_size++;
			new_points.push_back(Vector2d(kx, ky));
			new_poly_size++;
		}

		// Case 3: When only second point is outside 
		else if (i_pos < 0 && k_pos >= 0)
		{
			//Only point of intersection with edge is added 
			int x = x_intersect(x1, y1, x2, y2, ix, iy, kx, ky);
			int y = y_intersect(x1, y1, x2, y2, ix, iy, kx, ky);
			new_points.push_back(Vector2d(x, y));
			new_poly_size++;
		}

		// Case 4: When both points are outside 
		else
		{
			//No points are added 
		}
	}

	// Copying new points into original array 
	// and changing the no. of vertices 
	
	
	poly_size = new_poly_size;
	poly_points.clear();
	for (int i = 0; i < poly_size; i++)
	{
		Vector2d &p1 = new_points[i];
		poly_points.push_back(p1);
		cout << '(' << poly_points[i].GetX() << ", " << poly_points[i].GetY() << ") ";
	}
	cout << "\n";
	cout << "\n";
	cout << "\n";
}

void Cliping::suthHodgClip(Vector2dVector &poly_points, int poly_size, int clipper_points[][2], int clipper_size) {
	
	for (int i = 0; i < clipper_size; i++)
	{
		
		int k = (i + 1) % clipper_size;

		// We pass the current array of vertices, it's size 
		// and the end points of the selected clipper line 
		
		clip(poly_points, poly_size, clipper_points[i][0],clipper_points[i][1], clipper_points[k][0],
			clipper_points[k][1]);
	}
	int t = 0;



	// Printing vertices of clipped polygon 
	
	//for (int i = 0; i < poly_size; i++)
	//	cout << '(' << poly_points[i].GetX() <<", " << poly_points[i].GetY() << ") ";
}
